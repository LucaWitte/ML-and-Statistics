import numpy
import math
from matplotlib import pyplot
from matplotlib import animation
from matplotlib.patches import Polygon
from matplotlib.collections import PatchCollection
from matplotlib import cm

D = 1.0  # initial cell diameter
K = 1.0  # area stiffness
Gamma = 1.0 / 30.0  # perimeter stiffness
gamma = -1.0 / 20.0  # line tension (can be negative)
t_end = 3.0  # simulation end time
h = 0.001  # pseudo-timestep
eta = 0.01  # viscous damping coefficient
Nc = 5  # number of cells in each direction
G = [0.6, 1.0]  # interval for the random cell area growth rate
A_div = [1.5, 2.5]  # interval for the random cell division area threshold
l_min = D / 50.0  # edge length below which T1 transitions happen

duration = 10  # video duration in secs
fps = 25  # frames per second
frames = duration * fps  # number of frames
stepsPerFrame = int(round(t_end / h / frames))  # timesteps per animation frame


def crange(start, stop, n):
    index = start
    while index != stop:
        yield index
        index = (index + 1) % n


class Vertex:
    def __init__(self, x):
        self.x = x  # position
        self.f = numpy.zeros(2)  # force

    def clearForce(self):
        self.f = numpy.zeros(2)

    def makeStep(self):
        # forward Euler pseudo-timestepping
        self.x += h / eta * self.f


class Cell:
    def __init__(self):
        self.v = []  # indices of vertices belonging to this cell
        self.A = 0  # cell area
        self.P = 0  # cell perimeter
        self.A0 = 0  # target area
        self.G = numpy.random.uniform(G[0], G[1])
        self.A_div = numpy.random.uniform(A_div[0], A_div[1])

    def computeArea(self, vertices):
        self.A = 0
        n = len(self.v)
        for k in range(n):
            i = self.v[k]
            j = self.v[(k + 1) % n]
            self.A += vertices[i].x[0] * vertices[j].x[1] - vertices[i].x[1] * vertices[j].x[0]
        self.A /= 2

    def computePerimeter(self, vertices):
        self.P = 0
        n = len(self.v)
        for k in range(n):
            i = self.v[k]
            j = self.v[(k + 1) % n]
            self.P += numpy.linalg.norm(vertices[i].x - vertices[j].x)

    def computeForce(self, vertices):
        self.computeArea(vertices)
        self.computePerimeter(vertices)
        n = len(self.v)
        for l in range(n):
            i = self.v[l]
            j = self.v[(l - 1) % n]
            k = self.v[(l + 1) % n]
            e1 = vertices[j].x - vertices[i].x
            e2 = vertices[k].x - vertices[i].x
            e3 = vertices[k].x - vertices[j].x
            gradA = 0.5 * numpy.array([e3[1], -e3[0]])
            n1 = e1 / numpy.linalg.norm(e1)
            n2 = e2 / numpy.linalg.norm(e2)
            gradP = -n1 - n2
            vertices[i].f -= K * (self.A - self.A0) * gradA
            vertices[i].f -= Gamma * self.P * gradP
            vertices[i].f -= gamma * gradP

    def grow(self):
        self.A0 += self.G * h

    def divide(self, vertices, cells):
        self.computeArea(vertices)
        if self.A > self.A_div:
            # compute the centroid
            centroid = numpy.zeros(2)
            n = len(self.v)
            for k in range(n):
                i = self.v[k]
                j = self.v[(k + 1) % n]
                centroid += (vertices[i].x[0] * vertices[j].x[1] - vertices[i].x[1] * vertices[j].x[0]) * (
                    vertices[i].x + vertices[j].x
                )
            centroid /= 6 * self.A

            # compute the division axis
            dist_max = 0
            pair = []
            for i in range(n):
                for j in range(i):
                    dist = numpy.linalg.norm(vertices[self.v[i]].x - vertices[self.v[j]].x)
                    if dist > dist_max:
                        dist_max = dist
                        pair = [i, j]
            a = vertices[self.v[pair[0]]].x - vertices[self.v[pair[1]]].x
            a = numpy.array([a[1], -a[0]])

            before = []  # indices just before the new ones
            after = []  # indices just after the new ones
            for k in range(n):
                i = self.v[k]
                j = self.v[(k + 1) % n]
                e = vertices[j].x - vertices[i].x
                r = centroid - vertices[i].x
                s = (r[0] * a[1] - r[1] * a[0]) / (e[0] * a[1] - e[1] * a[0])  # intersection point
                if s >= 0 and s < 1:
                    before.append(k)
                    after.append((k + 1) % n)
                    vertices.append(Vertex(vertices[i].x + s * e))

            v = self.v
            self.v = [v[i] for i in crange(after[0], after[1], len(v))]
            self.v.extend([len(vertices) - 1, len(vertices) - 2])
            self.A0 /= 2
            self.A_div = numpy.random.uniform(A_div[0], A_div[1])
            
            # create a new daughter cell
            cells.append(Cell())
            cells[-1].v = [v[i] for i in crange(after[1], after[0], len(v))]
            cells[-1].v.extend([len(vertices) - 2, len(vertices) - 1])
            cells[-1].A0 = self.A0
            cells[-1].A_div = numpy.random.uniform(A_div[0], A_div[1])  # assign new division threshold

            # insert the new vertices to the two neighbors
            for c in cells:
                if c is not self:
                    for k in range(len(c.v)):
                        if c.v[k] == v[before[0]] and c.v[(k - 1) % len(c.v)] == v[after[0]]:
                            c.v.insert(k, len(vertices) - 2)
                        elif c.v[k] == v[before[1]] and c.v[(k - 1) % len(c.v)] == v[after[1]]:
                            c.v.insert(k, len(vertices) - 1)

    def T1(self, vertices, cells):
        k = 0
        while k < len(self.v):
            i = self.v[k]
            j = self.v[(k + 1) % len(self.v)]
            e = vertices[j].x - vertices[i].x
            if numpy.linalg.norm(e) < l_min:
                # find the 4 cells involved
                cell_group = [self, self, self, self]
                for c in cells:
                    if c is not self:
                        for l in range(len(c.v)):
                            if c.v[l] == i and c.v[(l - 1) % len(c.v)] != j:
                                cell_group[2] = c
                            elif c.v[l] == j:
                                if c.v[(l + 1) % len(c.v)] == i:
                                    cell_group[1] = c
                                else:
                                    cell_group[3] = c

                # remove one vertex from cells 0 & 1, add one vertex to cells 2 & 3
                cell_group[0].v.remove(j)
                if cell_group[1] is not self:
                    cell_group[1].v.remove(i)
                if cell_group[2] is not self:
                    cell_group[2].v.insert(cell_group[2].v.index(i), j)
                if cell_group[3] is not self:
                    cell_group[3].v.insert(cell_group[3].v.index(j), i)

                # relocate vertices i & j
                n = numpy.array([-e[1], e[0]]) / numpy.linalg.norm(e)
                shift = e / 2 + 1.01 * l_min / 2 * n
                vertices[i].x += shift
                vertices[j].x -= shift
                break
            k += 1


# initialize the cells & vertices
cells = []
vertices = []
d = math.sqrt(3) / 2  # ratio of inscribed to circumscribed circle diameters
for i in range(Nc):
    for j in range(Nc):
        cells.append(Cell())
        for k in range(6):
            x = numpy.array([0.75 * i, (j + 0.5 * (i % 2)) * d])
            x += numpy.array([math.cos(k * math.pi / 3), math.sin(k * math.pi / 3)]) / 2
            vertices.append(Vertex(D * x))
            cells[-1].v.append(len(vertices) - 1)

# merge vertices that are shared between cells
i = 0
while i < len(vertices):
    j = i + 1
    while j < len(vertices):
        if numpy.linalg.norm(vertices[i].x - vertices[j].x) < D / 100:
            for c in cells:
                for k in range(len(c.v)):
                    if c.v[k] == j:
                        c.v[k] = i
                    elif c.v[k] > j:
                        c.v[k] -= 1
            del vertices[j]
        else:
            j += 1
    i += 1

# add randomness
numpy.random.seed(42)
for v in vertices:
    v.x += D / 10 * numpy.array([numpy.random.uniform(-1, 1), numpy.random.uniform(-1, 1)])

# initialize the target cell areas
for c in cells:
    c.computeArea(vertices)  # compute the initial area
    c.A0 = c.A  # use this as the target area

# figure settings
margin = 2
fig = pyplot.figure()
ax = pyplot.axes(xlim=(-margin * D, ((Nc - 1) * 0.75 + margin) * D),
                 ylim=(-margin * D, ((Nc - 0.5) * d + margin) * D),
                 xlabel='x', ylabel='y')
ax.set_aspect('equal', 'box')
t = ax.text(-0.9 * margin * D, -0.9 * margin * D, 't=0')
polygons = []
for c in cells:
    polygons.append(Polygon([vertices[v].x for v in c.v], closed=True))
collection = PatchCollection(polygons, cmap=cm.jet)
collection.set_array(numpy.array([len(c.v) for c in cells]))
p = ax.add_collection(collection)
collection.set_clim([3, 9])
pyplot.colorbar(collection, ticks=range(10), label='neighbors')

# main loop
def run(frame):
    for s in range(stepsPerFrame):
        # grow the cell in the middle
        cells[(Nc + 1) * int(Nc / 2)].grow()

        for v in vertices:
            v.clearForce()

        for c in cells:
            c.computeForce(vertices)

        for v in vertices:
            v.makeStep()

        for c in cells:
            c.grow()

        for c in cells:
            c.divide(vertices, cells)

        for c in cells:
            c.T1(vertices, cells)

    # plot
    patches = []
    for c in cells:
        patches.append(Polygon([vertices[v].x for v in c.v], closed=True, fill=False))
    collection.set_paths(patches)
    collection.set_array(numpy.array([len(c.v) for c in cells]))
    t.set_text('t = ' + str(frame * stepsPerFrame * h))


anim = animation.FuncAnimation(fig, run, frames=frames, interval=1000 / fps)
anim.save('vertex_model_basic.gif', fps=fps, writer='pillow')
